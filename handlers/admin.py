from aiogram import Router, F, Bot
from aiogram.filters import Command, Text, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from utils.access import is_chat_admin
from utils.access import is_admin
from database.db import get_db
from config import BOT_USERNAME
from aiogram.utils.deep_linking import create_start_link
from keyboards.menu_kb import get_admin_menu_kb


import logging

from database import get_all_events, get_event, add_event, update_event, delete_event, ban_user, unban_user, is_banned,
    get_user_stats, update_user_balance, update_user_stats,
    set_setting, get_setting

router = Router()

chat_admins = set()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# FSM —Å—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è / —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–≤–µ–Ω—Ç—ñ–≤
class EventForm(StatesGroup):
    waiting_for_id = State()
    waiting_for_title = State()
    waiting_for_description = State()
    editing_field = State()  # –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –ø–æ–ª—ñ–≤

# --- –ö–æ–º–∞–Ω–¥–∏ ---

@router.message(Command("get_admins"), F.chat.type.in_({"group", "supergroup"}))
async def get_admins_handler(message: Message, bot: Bot):
    global chat_admins
    admins = await bot.get_chat_administrators(message.chat.id)
    chat_admins = {a.user.id for a in admins}
    names = [f"@{a.user.username}" if a.user.username else a.user.first_name for a in admins]
    sent = await message.answer("‚úÖ –ê–¥–º—ñ–Ω–∏:\n" + "\n".join(names))
    await sent.delete(delay=30)
    await message.delete(delay=30)
    logger.info(f"Admins updated: {chat_admins}")

@router.message(Command("admin"), F.chat.type.in_({"group", "supergroup"}))
async def admin_group(message: Message, bot: Bot):
    bot_user = await bot.get_me()
    link = f"https://t.me/{bot_user.username}?start=adminpanel"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", url=link)]
    ])
    sent = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=kb)
    await sent.delete(delay=30)
    await message.delete(delay=30)

@router.message(Text(startswith="/start adminpanel"))
async def admin_panel(message: Message):
    if message.from_user.id not in chat_admins:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –Ü–≤–µ–Ω—Ç–∏", callback_data="open_events")],
        [InlineKeyboardButton(text="‚öôÔ∏è –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", callback_data="other_admin")],
    ])
    await message.answer("üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# --- –Ü–≤–µ–Ω—Ç–∏ ---

@router.callback_query(F.data == "open_events")
async def open_events_cb(cb: CallbackQuery):
    if cb.from_user.id not in chat_admins:
        await cb.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    events = get_all_events()
    if not events:
        await cb.message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —ñ–≤–µ–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=ev["title"], callback_data=f"evview:{ev['id']}")]
        for ev in events
    ] + [[InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —ñ–≤–µ–Ω—Ç", callback_data="evadd")]])
    await cb.message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–≤–µ–Ω—Ç:", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("evview:"))
async def ev_view(cb: CallbackQuery):
    ev_id = cb.data.split(":", 1)[1]
    ev = get_event(ev_id)
    if not ev:
        await cb.answer("–Ü–≤–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    text = f"üé≤ <b>{ev['title']}</b>\n\n{ev['description']}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"evedit:{ev_id}")],
        [InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"evdel:{ev_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_events")]
    ])
    await cb.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data == "evadd")
async def ev_add_start(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id not in chat_admins:
        await cb.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    await state.set_state(EventForm.waiting_for_id)
    await cb.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ —ñ–≤–µ–Ω—Ç—É:")
    await cb.answer()

@router.message(EventForm.waiting_for_id)
async def ev_add_id(message: Message, state: FSMContext):
    ev_id = message.text.strip()
    if get_event(ev_id):
        await message.answer("‚ö†Ô∏è –Ü–≤–µ–Ω—Ç –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π ID.")
        return
    await state.update_data(ev_id=ev_id)
    await state.set_state(EventForm.waiting_for_title)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–≤–µ–Ω—Ç—É:")

@router.message(EventForm.waiting_for_title)
async def ev_add_title(message: Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(title=title)
    await state.set_state(EventForm.waiting_for_description)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —ñ–≤–µ–Ω—Ç—É:")

@router.message(EventForm.waiting_for_description)
async def ev_add_description(message: Message, state: FSMContext):
    description = message.text.strip()
    data = await state.get_data()
    ev_id = data["ev_id"]
    title = data["title"]
    add_event(ev_id, title, description)
    await message.answer("‚úÖ –Ü–≤–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ!")
    logger.info(f"Event added: {ev_id} - {title}")
    await state.clear()
    
@router.callback_query(F.data.startswith("evedit:"))
async def ev_edit_start(cb: CallbackQuery, state: FSMContext):
    ev_id = cb.data.split(":", 1)[1]
    ev = get_event(ev_id)
    if not ev:
        await cb.answer("–Ü–≤–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    if cb.from_user.id not in chat_admins:
        await cb.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    await state.update_data(ev_id=ev_id)
    await state.set_state(EventForm.waiting_for_title)
    await cb.message.answer(f"‚úèÔ∏è –†–µ–¥–∞–≥—É—î–º–æ —ñ–≤–µ–Ω—Ç '{ev['title']}'. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É.")
    await cb.answer()

@router.message(EventForm.waiting_for_title)
async def ev_edit_title(message: Message, state: FSMContext):
    if message.text == "/skip":
        data = await state.get_data()
        ev_id = data["ev_id"]
        ev = get_event(ev_id)
        await state.update_data(title=ev["title"])
    else:
        await state.update_data(title=message.text.strip())
    await state.set_state(EventForm.waiting_for_description)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –∞–±–æ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É:")

@router.message(EventForm.waiting_for_description)
async def ev_edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    ev_id = data["ev_id"]
    title = data.get("title")
    if message.text == "/skip":
        ev = get_event(ev_id)
        description = ev["description"]
    else:
        description = message.text.strip()

    update_event(ev_id, title, description)
    await message.answer("‚úÖ –Ü–≤–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    logger.info(f"Event updated: {ev_id} - {title}")
    await state.clear()

@router.callback_query(F.data.startswith("evdel:"))
async def ev_delete(cb: CallbackQuery):
    ev_id = cb.data.split(":", 1)[1]
    if cb.from_user.id not in chat_admins:
        await cb.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    delete_event(ev_id)
    await cb.message.answer("üóë –Ü–≤–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await open_events_cb(cb)
    await cb.answer()

# –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–±–µ–∫ –¥–ª—è "other_admin" –¥–ª—è —ñ–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, –ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
@router.callback_query(F.data == "other_admin")
async def other_admin_cb(cb: CallbackQuery):
    await cb.answer("–ü–æ–∫–∏ —â–æ —ñ–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–º–∞—î.", show_alert=True)

# –ë–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(Command("ban"))
async def cmd_ban(message: Message):
    if message.from_user.id not in chat_admins:
        await message.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    if not message.reply_to_message:
        await message.answer("–©–æ–± –∑–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    user_id = message.reply_to_message.from_user.id
    ban_user(user_id)
    await message.answer(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")

# –†–æ–∑–±–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(Command("unban"))
async def cmd_unban(message: Message):
    if message.from_user.id not in chat_admins:
        await message.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    if not message.reply_to_message:
        await message.answer("–©–æ–± —Ä–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    user_id = message.reply_to_message.from_user.id
    unban_user(user_id)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–∞–Ω—É
@router.message(Command("checkban"))
async def cmd_checkban(message: Message):
    user_id = message.from_user.id
    banned = is_banned(user_id)
    await message.answer(f"–í–∏ {'–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ' if banned else '–Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'}.")

# –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(Command("stats"))
async def cmd_stats(message: Message):
    user_id = message.from_user.id
    stats = get_user_stats(user_id)
    text = (f"–í–∞—à –±–∞–ª–∞–Ω—Å: {stats['balance']} —É–º\n"
            f"–ü–µ—Ä–µ–º–æ–≥: {stats['wins']}\n"
            f"–ü–æ—Ä–∞–∑–æ–∫: {stats['losses']}")
    await message.answer(text)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
@router.message(Command("addbalance"))
async def cmd_addbalance(message: Message):
    if message.from_user.id not in chat_admins:
        await message.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addbalance <user_id> <—Å—É–º–∞>")
        return
    try:
        user_id = int(args[1])
        amount = int(args[2])
    except:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.")
        return
    update_user_balance(user_id, amount)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {amount} —É–º.")

# –ü—Ä–∏–∫–ª–∞–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
@router.message(Command("setparam"))
async def cmd_setparam(message: Message):
    if message.from_user.id not in chat_admins:
        await message.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    args = message.text.split(maxsplit=2)
    if len(args) != 3:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setparam <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–Ω—è>")
        return
    key, value = args[1], args[2]
    set_setting(key, value)
    await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ '{value}'.")

@router.message(Command("getparam"))
async def cmd_getparam(message: Message):
    if message.from_user.id not in chat_admins:
        await message.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /getparam <–∫–ª—é—á>")
        return
    key = args[1]
    value = get_setting(key)
    await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{key}': '{value}'" if value else f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

@router.message(F.text == "/menu")
async def send_admin_menu_link(message: Message, bot):
    if message.chat.type not in ("supergroup", "group"):
        return await message.answer("‚ùó –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ü–µ –∞–¥–º—ñ–Ω
    if not await is_chat_admin(bot, message.from_user.id, message.chat.id):
        return await message.answer("üö´ –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–∏.")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ payload'–æ–º
    deep_link = await create_start_link(bot, payload=f"adminmenu:{message.chat.id}", encode=True)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è", url=deep_link)]
    ])

    await message.answer("üîß –í—ñ–¥–∫—Ä–∏–π—Ç–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º:", reply_markup=kb)


@router.message(CommandStart(deep_link=True))
async def handle_start_with_payload(message: Message):
    if not message.text.startswith("/start adminmenu:"):
        return

    payload = message.text.split("adminmenu:")[1]
    group_chat_id = int(payload)

    # –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ –±–∞–∑—ñ, —á–∏ —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å—Ç–∞—Ç—É—Å "admin"
    # –ê–ª–µ –∑–∞—Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏—î–º–æ –º–µ–Ω—é
    from keyboards.menu_kb import admin_main_menu_kb
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=admin_main_menu_kb())

    @router.message(Command("menu"))
async def send_admin_menu_link(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –≥—Ä—É–ø–∞
    if message.chat.type not in ["group", "supergroup"]:
        return await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        return await message.answer("‚ùå –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –º–µ–Ω—é.")

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –ø—Ä–∏–≤–∞—Ç
    deep_link = f"https://t.me/{BOT_USERNAME}?start=adminmenu"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è", url=deep_link)]
    ])
    await message.answer("–í—ñ–¥–∫—Ä–∏–π—Ç–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ:", reply_markup=keyboard)

@router.message(CommandStart(deep_link="adminmenu"))
async def open_admin_menu(message: Message):
    await message.answer(
        "üëë –ê–¥–º—ñ–Ω—Å—å–∫–µ –º–µ–Ω—é:\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:",
        reply_markup=get_admin_menu_kb()
    )

@router.callback_query(F.data == "admin_events")
async def open_events_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–≤–µ–Ω—Ç—ñ–≤ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")

@router.callback_query(F.data == "admin_users")
async def open_users_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üë• –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")

@router.callback_query(F.data == "admin_settings")
async def open_settings_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("‚öôÔ∏è –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")

@router.callback_query(F.data == "admin_stats")
async def open_stats_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ñ–≥—Ä–∞—Ö (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")
