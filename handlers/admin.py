from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import config
from aiogram.utils.deep_linking import create_start_link
from keyboards.menu_kb import admin_main_menu_kb
from database import (
    get_all_events, get_event, add_event, update_event, delete_event,
    ban_user, unban_user, is_banned, get_user_stats, update_user_balance,
    set_setting, get_setting
)
import logging
from aiogram.exceptions import TelegramBadRequest

router = Router()
chat_admins = set()
logger = logging.getLogger(__name__)
BOT_USERNAME = config.BOT_USERNAME

class EventForm(StatesGroup):
    add_waiting_for_id = State()
    add_waiting_for_title = State()
    add_waiting_for_description = State()
    edit_waiting_for_title = State()
    edit_waiting_for_description = State()

@router.message(Command("get_admins"), F.chat.type.in_({"group", "supergroup"}))
async def get_admins_handler(message: Message, bot: Bot):
    global chat_admins
    admins = await bot.get_chat_administrators(message.chat.id)
    chat_admins = {a.user.id for a in admins}
    names = [f"@{a.user.username}" if a.user.username else a.user.first_name for a in admins]
    sent = await message.answer("‚úÖ –ê–¥–º—ñ–Ω–∏:\n" + "\n".join(names))
    await sent.delete(delay=60)
    await message.delete(delay=60)
    logger.info(f"Admins updated: {chat_admins}")

@router.message(Command("admin"), F.chat.type.in_({"group", "supergroup"}))
async def admin_group(message: Message, bot: Bot):
    bot_user = await bot.get_me()
    link = f"https://t.me/{bot_user.username}?start=adminpanel"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", url=link)]
    ])
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=kb)
    

@router.message(CommandStart(deep_link=True))
async def handle_start_with_payload(message: Message):
    payload = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""

    if payload == "adminpanel":
        if message.from_user.id not in chat_admins:
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –Ü–≤–µ–Ω—Ç–∏", callback_data="open_events")],
            [InlineKeyboardButton(text="‚öôÔ∏è –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", callback_data="other_admin")],
            [InlineKeyboardButton(text="üí∞ –í–ª–∞—Å–Ω–∞ –≤–∞–ª—é—Ç–∞", callback_data="admin_currency")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        ])
        await message.answer("üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

    elif payload.startswith("adminmenu:"):
        group_chat_id = int(payload.split("adminmenu:")[1])
        await message.answer("üîß –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=admin_main_menu_kb())

    else:
        await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –í–∏ —É –±–æ—Ç—ñ-–ø–æ–º—ñ—á–Ω–∏–∫—É.")

# --- –Ü–≤–µ–Ω—Ç–∏ (—Ç–µ —Å–∞–º–µ, —â–æ —Ç–∏ –≤–∂–µ –º–∞—î—à) ---
# –¢–∏ –º–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ —É —Å–≤–æ—î–º—É —Ñ–∞–π–ª—ñ –∞–±–æ –¥–æ–¥–∞—Ç–∏ —Å—é–¥–∏, —è–∫ —Ç–æ–±—ñ –∑—Ä—É—á–Ω–æ

@router.callback_query(F.data == "other_admin")
async def other_admin_cb(cb: CallbackQuery):
    await cb.answer("–ü–æ–∫–∏ —â–æ —ñ–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–º–∞—î.", show_alert=True)

@router.callback_query(F.data == "admin_currency")
async def handle_admin_currency(cb: CallbackQuery):
    if cb.from_user.id not in chat_admins:
        await cb.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    await cb.message.answer("üí∞ –¢—É—Ç –º–æ–∂–Ω–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–æ—é –≤–∞–ª—é—Ç–æ—é (–ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞).")
    await cb.answer()

@router.callback_query(F.data == "admin_stats")
async def handle_admin_stats(cb: CallbackQuery):
    if cb.from_user.id not in chat_admins:
        await cb.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return
    await cb.message.answer("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∏ —â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
    await cb.answer()

# –ö–æ–º–∞–Ω–¥–∞ /menu —É –≥—Ä—É–ø—ñ, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–¥–º—ñ–Ω –º–µ–Ω—é
@router.message(F.text == "/menu")
async def send_admin_menu_link(message: Message, bot: Bot):
    if message.chat.type not in ("supergroup", "group"):
        return await message.answer("‚ùó –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ.")
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –∞–¥–º—ñ–Ω
    if message.from_user.id not in chat_admins:
        return await message.answer("üö´ –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–∏.")
    deep_link = await create_start_link(bot, payload=f"adminmenu:{message.chat.id}", encode=True)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è", url=deep_link)]
    ])
    await message.answer("üîß –í—ñ–¥–∫—Ä–∏–π—Ç–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º:", reply_markup=kb)
