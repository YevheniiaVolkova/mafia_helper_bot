import asyncio
import json
from pathlib import Path
BASE_DIR = Path(__file__).parent

import logging
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.enums import ChatType
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from asyncio import sleep

import config  # –ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ TOKEN, GROUP_CHAT_ID, ADMIN_IDS

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher()

# –§–∞–π–ª–∏ —Å—Ç–∞–Ω—É
PLAYERS_STATUS = "players_status.json"
ROLES_FILE = "roles.json"
SELECTED_EVENT = "selected_event.json"
QUEEN_STATE = "queen_state.json"

# –í –ø–∞–º'—è—Ç—ñ
chat_admins = set(config.ADMIN_IDS)
players_status = {}
selected_event = None


def load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default


def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_players_status():
    global players_status
    players_status = load_json(PLAYERS_STATUS, {})


def save_players_status():
    save_json(PLAYERS_STATUS, players_status)


def load_selected_event():
    global selected_event
    selected_event = load_json(SELECTED_EVENT, None)


def save_selected_event(event):
    global selected_event
    selected_event = event
    save_json(SELECTED_EVENT, event)


def load_queen_state():
    return load_json(QUEEN_STATE, {
        "initial_done": False,
        "confirmed_user_id": None,
        "last_immunity": None,
    })


def save_queen_state(state):
    save_json(QUEEN_STATE, state)


# --- –ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏ ---
@dp.message(Command("get_admins"), F.chat.type.in_({"group", "supergroup"}))
async def get_admins(message: Message):
    global chat_admins
    admins = await bot.get_chat_administrators(message.chat.id)
    chat_admins = {a.user.id for a in admins}
    names = [
        f"@{a.user.username}" if a.user.username else f"{a.user.first_name or ''}".strip()
        for a in admins
    ]
    sent = await message.answer("‚úÖ –ê–¥–º—ñ–Ω–∏:\n" + "\n".join(names))
    await sleep(30)
    try:
        await message.delete()
        await sent.delete()
    except:
        pass


@dp.message(Command("admin"), F.chat.type.in_({"group", "supergroup"}))
async def admin_group(message: Message):
    bot_user = await bot.get_me()
    link = f"https://t.me/{bot_user.username}?start=adminpanel"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", url=link)]
    ])
    sent = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=kb)
    await sleep(30)
    try:
        await message.delete()
        await sent.delete()
    except:
        pass


@dp.message(Command("start"))
async def start(message: Message):
    txt = message.text or ""
    arg = txt.split(maxsplit=1)[1] if " " in txt else None

    if arg == "adminpanel":
        if message.from_user.id in chat_admins:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé≤ –Ü–≤–µ–Ω—Ç–∏", callback_data="open_events")],
                [InlineKeyboardButton(text="üí∞ –ì—Ä–æ—à—ñ", callback_data="money")],
                [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
            ])
            await message.answer("üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)
        else:
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
    elif arg == "confirmrole":
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–Ø ‚Äî –ü–æ–≤—ñ—è")],
                [KeyboardButton(text="–Ø ‚Äî –ú—ñ—Å—Ç–æ")],
                [KeyboardButton(text="–Ø ‚Äî –ú–∞—Ñ—ñ—è")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å:", reply_markup=kb)
    else:
        sent = await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏–∫–æ–Ω–∞–π—Ç–µ /admin –≤ –≥—Ä—É–ø—ñ.")
        await sleep(30)
        try:
            await message.delete()
            await sent.delete()
        except:
            pass


# --- –ü—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∏–±—ñ—Ä —Ä–æ–ª—ñ + –∞–¥–º—ñ–Ω–∫–∞) ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def private_msg(message: Message):
    txt = message.text or ""

    # –í–∏–±—ñ—Ä —Ä–æ–ª—ñ
    if txt in ["–Ø ‚Äî –ü–æ–≤—ñ—è", "–Ø ‚Äî –ú—ñ—Å—Ç–æ", "–Ø ‚Äî –ú–∞—Ñ—ñ—è"]:
        roles = load_json(ROLES_FILE, {})
        role = "–ø–æ–≤—ñ—è" if "–ü–æ–≤—ñ—è" in txt else ("–º–∞—Ñ—ñ—è" if "–ú–∞—Ñ—ñ—è" in txt else "–º—ñ—Å—Ç–æ")
        roles[str(message.from_user.id)] = {
            "role": role,
            "nickname": message.from_user.full_name
        }
        save_json(ROLES_FILE, roles)
        await message.answer(f"–í–∏ –≤–∏–±—Ä–∞–ª–∏: {role}", reply_markup=ReplyKeyboardRemove())
        return

    # –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø—Ä–∏–≤–∞—Ç—ñ
    if message.from_user.id in chat_admins:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –Ü–≤–µ–Ω—Ç–∏", callback_data="open_events")],
            [InlineKeyboardButton(text="üí∞ –ì—Ä–æ—à—ñ", callback_data="money")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
        ])
        await message.answer("üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)
    else:
        await message.answer("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")


# --- –í–∏–±—ñ—Ä —ñ–≤–µ–Ω—Ç—É ---
@dp.callback_query(F.data == "open_events")
async def ev_open(cb: CallbackQuery):
    if cb.from_user.id not in chat_admins:
        return

    # –ö–ª–∞—Å–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    events = load_json("events.json", [])

    logging.info(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ–≤–µ–Ω—Ç—ñ–≤: {len(events)}")

    if not events:
        await cb.message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —ñ–≤–µ–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª events.json.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=e["title"], callback_data=f"evprev:{i}")]
        for i, e in enumerate(events)
    ])
    await cb.message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–≤–µ–Ω—Ç:", reply_markup=kb)




@dp.callback_query(F.data.startswith("evprev:"))
async def ev_prev(cb: CallbackQuery):
    idx = int(cb.data.split(":", 1)[1])
    events = load_json("events.json", [])
    ev = events[idx]
    text = f"üé≤ {ev['title']}\n{ev['description']}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í–∏–±—Ä–∞—Ç–∏", callback_data=f"select:{idx}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_events")],
    ])
    await cb.message.answer(text, parse_mode="HTML", reply_markup=kb)


@dp.callback_query(F.data.startswith("select:"))
async def ev_sel(cb: CallbackQuery):
    idx = int(cb.data.split(":", 1)[1])
    events = load_json("events.json", [])
    ev = events[idx]
    save_selected_event(ev)
    await cb.message.answer(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ: {ev['title']}", parse_mode="HTML")


# --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è status –∑—ñ —Å–ø–∏—Å–∫—É –∂–∏–≤–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ ---
@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def build_players_status(message: Message):
    if "–ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ:" not in (message.text or ""):
        return
    roles = load_json(ROLES_FILE, {})
    section = message.text.split("–ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ:")[1].split("–•—Ç–æ—Å—å —ñ–∑ –Ω–∏—Ö:")[0]
    nicks = [
        line.split(". ", 1)[1].strip()
        for line in section.splitlines() if ". " in line
    ]
    ps = {}
    for uid, info in roles.items():
        nick = info.get("nickname", "")
        ps[uid] = {
            "nickname": nick,
            "role": info["role"],
            "alive": nick in nicks
        }
    global players_status
    players_status = ps
    save_players_status()


# --- –Ü–≤–µ–Ω—Ç "–ö–æ—Ä–æ–ª–µ–≤–∞ –Ω–æ—á—ñ": —Å—Ç–∞—Ä—Ç —ñ —â–æ–¥–µ–Ω–Ω–∏–π —ñ–º—É–Ω—ñ—Ç–µ—Ç ---
@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def on_group_live(message: Message):
    if "–ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ:" not in (message.text or ""):
        return
    load_selected_event()
    load_players_status()
    if not selected_event or selected_event.get("id") != "queen_of_night":
        return

    state = load_queen_state()

    # –ü–µ—Ä—à–∏–π –¥–µ–Ω—å
    if not state["initial_done"]:
        bot_user = await bot.get_me()
        deep = f"https://t.me/{bot_user.username}?start=confirmrole"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëë –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–ª—å", url=deep)]
        ])
        await message.answer("üëë –ü–æ–≤—ñ—è ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å —É –ø—Ä–∏–≤–∞—Ç—ñ:", reply_markup=kb)
        state["initial_done"] = True
        save_queen_state(state)

    # –ù–∞—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ
    else:
        pov_id = state.get("confirmed_user_id")
        if pov_id:
            kb = await build_immunity_keyboard(state.get("last_immunity"))
            await bot.send_message(
                pov_id,
                "üî∏ –ù–æ–≤–∏–π –¥–µ–Ω—å ‚Äî –æ–±–µ—Ä—ñ—Ç—å, –∫–æ–º—É –¥–∞—î—Ç–µ —ñ–º—É–Ω—ñ—Ç–µ—Ç:",
                reply_markup=kb
            )


# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–ª—ñ –ü–æ–≤—ñ—î—é ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def confirm_role(message: Message):
    text = message.text or ""
    if text.lower().startswith("—è ‚Äî –ø–æ–≤—ñ—è"):
        state = load_queen_state()
        state["confirmed_user_id"] = message.from_user.id
        save_queen_state(state)


async def build_immunity_keyboard(last_id):
    load_players_status()
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for uid, info in players_status.items():
        if info["alive"] and uid != last_id:
            kb.inline_keyboard.append([
                InlineKeyboardButton(text=info["nickname"], callback_data=f"imm:{uid}")
            ])
    return kb


@dp.callback_query(F.data.startswith("imm:"))
async def give_immunity(cb: CallbackQuery):
    uid = cb.data.split(":", 1)[1]
    state = load_queen_state()
    if cb.from_user.id != state.get("confirmed_user_id"):
        await cb.answer("–¢—ñ–ª—å–∫–∏ –ü–æ–≤—ñ—è –º–æ–∂–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏.", show_alert=True)
        return

    state["last_immunity"] = uid
    save_queen_state(state)

    nick = players_status.get(uid, {}).get("nickname", "")
    await bot.send_message(
        config.GROUP_CHAT_ID,
        f"üîî –Ü–º—É–Ω—ñ—Ç–µ—Ç –æ—Ç—Ä–∏–º–∞–≤: {nick}"
    )
    await cb.answer("–Ü–º—É–Ω—ñ—Ç–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


# --- –î–µ—Ç–µ–∫—Ç —Å–º–µ—Ä—Ç—ñ –ü–æ–≤—ñ—ó —Ç–∞ –ø–æ–º—Å—Ç–∞ ---
@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def detect_poviy_kill(message: Message):
    load_selected_event()
    load_players_status()
    if not selected_event or selected_event.get("id") != "queen_of_night":
        return

    m = re.search(r"–≤–±–∏—Ç–∏–π –±–µ–∑—Ü—ñ–Ω–Ω–∏–π –ü–æ–≤—ñ—è (.+?)\.\.\.", message.text or "")
    if not m:
        return

    nick = m.group(1).strip()
    pov_id = None
    for uid, info in players_status.items():
        if info["nickname"] == nick and info["role"] == "–ø–æ–≤—ñ—è":
            pov_id = int(uid)
            players_status[uid]["alive"] = False
            save_players_status()
            break

    if not pov_id:
        return

    mafia_alive = [
        (u, i["nickname"])
        for u, i in players_status.items()
        if i["role"] == "–º–∞—Ñ—ñ—è" and i["alive"]
    ]
    if not mafia_alive:
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=n, callback_data=f"rev:{u}")]
        for u, n in mafia_alive
    ])
    await bot.send_message(
        pov_id,
        "üëë –í–∏ –º–µ—Ä—Ç–≤—ñ. –û–±–µ—Ä—ñ—Ç—å –º–∞—Ñ—ñ–æ–∑—ñ –¥–ª—è –ø–æ–º—Å—Ç–∏:",
        reply_markup=kb
    )


@dp.callback_query(F.data.startswith("rev:"))
async def revenge(cb: CallbackQuery):
    mafia_uid = cb.data.split(":", 1)[1]
    load_players_status()
    pov_id = cb.from_user.id
    pov_nick = players_status[str(pov_id)]["nickname"]
    mafia_nick = players_status.get(mafia_uid, {}).get("nickname", "???")

    await bot.send_message(
        config.GROUP_CHAT_ID,
        f"üëë –ü–æ–≤—ñ—è {pov_nick} –ø–æ–º—Å—Ç–∏–ª–∞—Å—è! –†–æ–∑–∫—Ä–∏—Ç–æ –º–∞—Ñ—ñ–æ–∑—ñ: {mafia_nick}."
    )
    await cb.answer("–ü–æ–º—Å—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.")


async def main():
    load_selected_event()
    load_players_status()
    logging.info("Bot started")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())




#cd 'c:\–∂–µ–Ω—è\–º–∞—Ñ—ñ—è\–ë–æ—Ç\mafia_helper_bot'

#python bot.py

